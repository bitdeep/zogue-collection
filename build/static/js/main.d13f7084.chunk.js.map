{"version":3,"sources":["App.js","logo.png","reportWebVitals.js","index.js"],"names":["web3","ethereum","account","main","abi","contract","App","useState","currentAccount","setCurrentAccount","currentPrice","setCurrentPrice","displayPrice","setDisplayPrice","totalSupply","setTotalSupply","mintAlert","setMintAlert","mintAmount","setMintAmount","presaleActive","setPresaleActive","saleActive","setSaleActive","presaleWhitelist","setPresaleWhitelist","logo","lastMint","setLastMint","weiPrice","setWeiPrice","TOTAL_SUPPLY","setTOTAL_SUPPLY","checkWalletIsConnected","a","getweb3","console","log","request","method","accounts","length","eth","Contract","methods","call","SALE_ACTIVE","PUBLIC_SALE_PRICE","price","_price","parseFloat","toFixed","PRESALE_ACTIVE","PRESALE_PRICE","alert","toString","mintNftHandler","args","from","value","mintPresale","estimateGas","err","res","send","tx","transactionHash","loadLastMintedNft","mintPublic","balanceOf","tokenOfOwnerByIndex","tokenURI","fetch","crossDomain","json","r","image","connectWalletHandler","provider","setAmount","e","_setAmount","target","amount","total","setAmountLess","document","getElementById","setAmountPlus","providerOptions","metamask","id","name","type","check","walletconnect","package","WalletConnectProvider","options","infuraId","authereum","Authereum","web3Modal","Web3Modal","network","cacheProvider","connect","on","error","info","Web3","useEffect","Row","className","Col","defaultValue","onClick","onChange","src","height","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.d13f7084.chunk.js","sourcesContent":["import {useEffect, useState} from 'react';\r\nimport './App.css';\r\nimport contract from './contracts/NFTCollectible.json';\r\nimport logo from './logo.png'\r\nimport Web3 from \"web3\";\r\nimport Web3Modal from \"web3modal\";\r\nimport Authereum from \"authereum\";\r\nimport WalletConnectProvider from \"@walletconnect/web3-provider\";\r\n\r\nimport {Container, Row, Col} from \"react-bootstrap\";\r\nconst contractAddress = \"0x6AeCf42F748eaF4335ae9362591619B6D9F68870\";\r\nconst abi = contract.abi;\r\nlet web3, ethereum, account, main;\r\n\r\nfunction App() {\r\n\r\n    const [currentAccount, setCurrentAccount] = useState(null);\r\n    const [currentPrice, setCurrentPrice] = useState(0);\r\n    const [displayPrice, setDisplayPrice] = useState(0);\r\n    const [totalSupply, setTotalSupply] = useState(0);\r\n    const [mintAlert, setMintAlert] = useState('');\r\n    const [mintAmount, setMintAmount] = useState(1);\r\n    const [presaleActive, setPresaleActive] = useState(false);\r\n    const [saleActive, setSaleActive] = useState(false);\r\n    const [presaleWhitelist, setPresaleWhitelist] = useState(false);\r\n    const [lastMint, setLastMint] = useState(logo);\r\n    const [weiPrice, setWeiPrice] = useState(0);\r\n    const [TOTAL_SUPPLY, setTOTAL_SUPPLY] = useState(0);\r\n\r\n    const checkWalletIsConnected = async () => {\r\n        ethereum = await getweb3();\r\n        if (!ethereum) {\r\n            console.log(\"Make sure you have Metamask installed!\");\r\n            return;\r\n        } else {\r\n            console.log(\"Wallet exists! We're ready to go!\")\r\n        }\r\n\r\n        const accounts = await ethereum.request({method: 'eth_accounts'});\r\n\r\n        if (accounts.length !== 0) {\r\n            account = accounts[0];\r\n            console.log(\"Found an authorized account: \", account);\r\n            setCurrentAccount(account);\r\n\r\n            try {\r\n                main = new web3.eth.Contract(abi, contractAddress);\r\n                setPresaleWhitelist(await main.methods.presaleWhitelist(account).call());\r\n\r\n                setTotalSupply(await main.methods.totalSupply().call());\r\n                setTOTAL_SUPPLY(await main.methods.TOTAL_SUPPLY().call());\r\n\r\n                setSaleActive(await main.methods.SALE_ACTIVE().call());\r\n                let price = await main.methods.PUBLIC_SALE_PRICE().call();\r\n                setWeiPrice(price);\r\n                const _price = parseFloat(price / 1e18).toFixed(4);\r\n                setCurrentPrice(_price);\r\n                setDisplayPrice(_price);\r\n                setMintAlert('You are NOT whitelisted. Minting from public sale.');\r\n                setPresaleActive(await main.methods.PRESALE_ACTIVE().call());\r\n\r\n                if (presaleWhitelist && presaleActive) {\r\n                    price = await main.methods.PRESALE_PRICE().call();\r\n                    const _price = parseFloat(price / 1e18).toFixed(4);\r\n                    setWeiPrice(_price);\r\n                    setCurrentPrice(_price);\r\n                    setDisplayPrice(_price);\r\n                    setMintAlert('You are whitelisted.');\r\n                }\r\n                console.log('PRESALE_ACTIVE', presaleActive);\r\n                console.log('SALE_ACTIVE', saleActive);\r\n                // loadLastMintedNft();\r\n\r\n            } catch (err) {\r\n                alert('ERROR: CHANGE YOUR NETWORK TO ROPSTEN.');\r\n                console.log(err.toString());\r\n            }\r\n\r\n        } else {\r\n            console.log(\"No authorized account found\");\r\n        }\r\n    }\r\n\r\n    const mintNftHandler = async () => {\r\n        let price = currentPrice;\r\n        console.log('PRESALE_ACTIVE', presaleActive);\r\n        console.log('SALE_ACTIVE', saleActive);\r\n        if (!presaleActive && !saleActive) {\r\n            setMintAlert('Mint is disabled.');\r\n            return;\r\n        }\r\n        let tx;\r\n        const totalPrice = weiPrice * mintAmount;\r\n        const args = {from: account, value: totalPrice};\r\n        console.log('mintAmount', mintAmount);\r\n        if (presaleWhitelist && presaleActive) {\r\n            await main.methods.mintPresale(mintAmount)\r\n                .estimateGas(args, async function (err, res) {\r\n                    if (err) {\r\n                        alert(err.toString());\r\n                    } else {\r\n                        tx = await main.methods.mintPresale(mintAmount).send(args);\r\n                        setMintAlert('Mint completed. Thank you, tx ', tx.transactionHash);\r\n                        loadLastMintedNft();\r\n                    }\r\n                });\r\n\r\n        } else {\r\n            await main.methods.mintPublic(mintAmount)\r\n                .estimateGas(args, async function (err, res) {\r\n                    if (err) {\r\n                        alert(err.toString());\r\n                    } else {\r\n                        tx = await main.methods.mintPublic(mintAmount).send(args);\r\n                        setMintAlert('Mint completed. Thank you, tx ', tx.transactionHash);\r\n                        loadLastMintedNft();\r\n                    }\r\n                });\r\n        }\r\n\r\n    }\r\n\r\n    const loadLastMintedNft = async () => {\r\n        let balanceOf = await main.methods.balanceOf(account).call();\r\n        console.log('balanceOf', balanceOf);\r\n        if (balanceOf == 0) return;\r\n        --balanceOf;\r\n        const tokenOfOwnerByIndex = await main.methods.tokenOfOwnerByIndex(account, balanceOf).call();\r\n        let tokenURI = await main.methods.tokenURI(tokenOfOwnerByIndex).call();\r\n        // tokenURI = 'http://localhost:3000/metadata/0?0';\r\n        console.log('tokenURI', tokenURI);\r\n        const res = await fetch(tokenURI, {crossDomain: true});\r\n        const r = await res.json();\r\n        setLastMint(r.image);\r\n        // console.log(r);\r\n    }\r\n\r\n    const connectWalletHandler = async () => {\r\n        ethereum = await getweb3();\r\n\r\n        if (!ethereum) {\r\n            alert(\"Please install Metamask!\");\r\n        }\r\n\r\n        try {\r\n            const accounts = await ethereum.provider.request({method: 'eth_requestAccounts'});\r\n            console.log(\"Found an account! Address: \", accounts[0]);\r\n            setCurrentAccount(accounts[0]);\r\n        } catch (err) {\r\n            console.log(err)\r\n        }\r\n    }\r\n\r\n\r\n    const connectWalletButton = () => {\r\n        return (\r\n            <>\r\n                <button onClick={connectWalletHandler} className='cta-button connect-wallet-button'>\r\n                    Connect Wallet\r\n                </button>\r\n            </>\r\n        )\r\n    }\r\n\r\n    const setAmount = (e) => {\r\n        const amount = e.target.value;\r\n        _setAmount(amount);\r\n    }\r\n\r\n    function _setAmount(amount) {\r\n        setMintAmount(amount)\r\n        const total = parseFloat(currentPrice * amount).toFixed(4)\r\n        setDisplayPrice(total);\r\n    }\r\n\r\n    function setAmountLess() {\r\n        let amount = mintAmount;\r\n        if (amount > 1) amount--;\r\n        document.getElementById('inputAmount').value = amount;\r\n        _setAmount(amount)\r\n    }\r\n\r\n    function setAmountPlus() {\r\n        let amount = mintAmount;\r\n        amount++;\r\n        document.getElementById('inputAmount').value = amount;\r\n        _setAmount(amount)\r\n    }\r\n\r\n    const mintNftButton = () => {\r\n        return (\r\n            <>\r\n                <div className=\"mint-status rounded shadow small p-1\">\r\n                    {mintAlert}\r\n                </div>\r\n                <Row className=\" p-1\">\r\n                    <h3>BECOME A ZOGUER</h3>\r\n                </Row>\r\n\r\n                <Row className=\"border-top p-1\">\r\n                    <Col className=\"text-lg-end\">AMOUNT</Col>\r\n                    <Col className=\"text-lg-start\">\r\n                        <Row>\r\n                            <input className='input-sig-button' defaultValue=\"-\" type=\"button\"\r\n                                   onClick={setAmountLess}/>\r\n                            <input id=\"inputAmount\" className='input-button' defaultValue={1} type=\"number\"\r\n                                   onChange={setAmount}/>\r\n                            <input className='input-sig-button' defaultValue=\"+\" type=\"button\"\r\n                                   onClick={setAmountPlus}/>\r\n                        </Row>\r\n                    </Col>\r\n                </Row>\r\n                <Row className=\"border-top p-1\">\r\n                    <Col className=\"text-lg-end\">TOTAL</Col>\r\n                    <Col className=\"text-lg-start\">{displayPrice} ETH</Col>\r\n                </Row>\r\n                <Row className=\"border-top p-1\">\r\n                    <Col className=\"text-lg-end\">ZOGUERS SOUTED</Col>\r\n                    <Col className=\"text-lg-start\">{totalSupply}/{TOTAL_SUPPLY}</Col>\r\n                </Row>\r\n                <Row className=\"p-3\">\r\n                    <button onClick={mintNftHandler} className='cta-button mint-nft-button rounded shadow p-1'>\r\n                        Mint Now\r\n                    </button>\r\n                </Row>\r\n                <Row>\r\n                    <Col className=\"small p-1\">{currentAccount}</Col>\r\n                </Row>\r\n            </>\r\n        )\r\n    }\r\n\r\n    async function getweb3() {\r\n        let web3Modal;\r\n        let provider;\r\n        let providerOptions;\r\n        providerOptions = {\r\n            metamask: {\r\n                id: \"injected\",\r\n                name: \"MetaMask\",\r\n                type: \"injected\",\r\n                check: \"isMetaMask\"\r\n            },\r\n            walletconnect: {\r\n                package: WalletConnectProvider,\r\n                options: {\r\n                    infuraId: \"647c7c604e3a4164a3400530f46e8e34\"\r\n                }\r\n            },\r\n            authereum: {\r\n                package: Authereum // required\r\n            },\r\n        };\r\n        web3Modal = new Web3Modal({\r\n            network: \"\",\r\n            cacheProvider: true,\r\n            providerOptions\r\n        });\r\n        provider = await web3Modal.connect();\r\n        provider.on('error', e => console.error('WS Error', e));\r\n        provider.on('end', e => console.error('WS End', e));\r\n\r\n        provider.on(\"disconnect\", (error) => {\r\n            console.log(error);\r\n        });\r\n        provider.on(\"connect\", (info) => {\r\n            console.log(info);\r\n        });\r\n        web3 = new Web3(provider);\r\n\r\n        return provider;\r\n    }\r\n\r\n    useEffect(() => {\r\n        checkWalletIsConnected();\r\n    }, [])\r\n\r\n    return (\r\n        <div>\r\n            <Row className=\"m-1 text-center\">\r\n                <Col>\r\n                    <h1 className=\"mt-5\">ZOGUE</h1>\r\n                </Col>\r\n            </Row>\r\n            <div className=' d-flex justify-content-center'>\r\n                <Row className=\"\">\r\n                    <Col>\r\n                        <div className='main-app rounded shadow-lg'>\r\n                            <Row className=\"\">\r\n                                <Col>\r\n                                    {currentAccount ? mintNftButton() : connectWalletButton()}\r\n                                </Col>\r\n                                <Col className=\"d-none d-sm-block\">\r\n                                    <img src={lastMint} height={280}\r\n                                         className='rounded shadow-lg'/>\r\n                                </Col>\r\n                            </Row>\r\n                        </div>\r\n                    </Col>\r\n                </Row>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default App;\r\n","export default __webpack_public_path__ + \"static/media/logo.2fea0292.png\";","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}