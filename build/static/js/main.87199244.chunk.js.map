{"version":3,"sources":["App.js","logo.png","reportWebVitals.js","index.js"],"names":["web3","ethereum","account","main","abi","contract","App","useState","currentAccount","setCurrentAccount","displayPrice","setDisplayPrice","totalSupply","setTotalSupply","mintAlert","setMintAlert","mintAmount","setMintAmount","presaleActive","setPresaleActive","saleActive","setSaleActive","setPresaleWhitelist","logo","setLastMint","weiPrice","setWeiPrice","TOTAL_LIMIT","setTotalLimit","balanceOf","setBalanceOf","checkWalletIsConnected","a","getweb3","console","log","request","method","accounts","length","eth","Contract","methods","presaleWhitelist","call","wlStatus","_balanceOf","SALE_ACTIVE","sale_active","PRESALE_ACTIVE","presale","PUBLIC_SALE_PRICE","PRICE","PRESALE_PRICE","parseFloat","toFixed","alert","toString","mintNftHandler","totalPrice","args","from","value","mingMsg","mintPresale","estimateGas","err","res","send","tx","loadLastMintedNft","transactionHash","mintPublic","tokenOfOwnerByIndex","tokenURI","fetch","crossDomain","json","r","image","connectWalletHandler","provider","setAmount","e","_setAmount","target","amount","price","total","setAmountLess","document","getElementById","setAmountPlus","providerOptions","metamask","id","name","type","check","walletconnect","package","WalletConnectProvider","options","infuraId","authereum","Authereum","web3Modal","Web3Modal","network","cacheProvider","connect","on","error","chainId","info","Web3","useEffect","Row","className","Col","defaultValue","onClick","onChange","src","height","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.87199244.chunk.js","sourcesContent":["import {useEffect, useState} from 'react';\r\nimport './App.css';\r\nimport contract from './contracts/NFTCollectible.json';\r\nimport logo from './logo.png'\r\nimport Web3 from \"web3\";\r\nimport Web3Modal from \"web3modal\";\r\nimport Authereum from \"authereum\";\r\nimport WalletConnectProvider from \"@walletconnect/web3-provider\";\r\n\r\nimport {Container, Row, Col} from \"react-bootstrap\";\r\n\r\nconst contractAddress = \"0xedb38B5CF833e7b3E53312950D2255Cf756A9A90\"; // ropsten\r\nconst abi = contract.abi;\r\nlet web3, ethereum, account, main;\r\n\r\nfunction App() {\r\n\r\n    const [currentAccount, setCurrentAccount] = useState(null);\r\n    const [displayPrice, setDisplayPrice] = useState(0);\r\n    const [totalSupply, setTotalSupply] = useState(0);\r\n    const [mintAlert, setMintAlert] = useState('');\r\n    const [mintAmount, setMintAmount] = useState(1);\r\n    const [presaleActive, setPresaleActive] = useState(false);\r\n    const [saleActive, setSaleActive] = useState(false);\r\n    const [presaleWhitelist, setPresaleWhitelist] = useState(false);\r\n    const [lastMint, setLastMint] = useState(logo);\r\n    const [weiPrice, setWeiPrice] = useState(0);\r\n    const [TOTAL_LIMIT, setTotalLimit] = useState(0);\r\n    const [balanceOf, setBalanceOf] = useState(0);\r\n\r\n    const checkWalletIsConnected = async () => {\r\n\r\n        ethereum = await getweb3();\r\n        if (!ethereum) {\r\n            console.log(\"Make sure you have Metamask installed!\");\r\n            return;\r\n        } else {\r\n            console.log(\"Wallet exists! We're ready to go!\")\r\n        }\r\n\r\n        const accounts = await ethereum.request({method: 'eth_accounts'});\r\n\r\n        if (accounts.length !== 0) {\r\n            account = accounts[0];\r\n            console.log(\"Found an authorized account: \", account);\r\n            setCurrentAccount(account);\r\n\r\n            try {\r\n                main = new web3.eth.Contract(abi, contractAddress);\r\n                const wlStatus = (await main.methods.presaleWhitelist(account).call());\r\n                setPresaleWhitelist(wlStatus);\r\n                setTotalSupply(await main.methods.totalSupply().call());\r\n                setTotalLimit(await main.methods.TOTAL_LIMIT().call());\r\n                let _balanceOf = await main.methods.balanceOf(account).call();\r\n                setBalanceOf(_balanceOf);\r\n                const sale_active = await main.methods.SALE_ACTIVE().call();\r\n                setSaleActive(sale_active);\r\n                setMintAlert('Mint is disabled.');\r\n                const presale = await main.methods.PRESALE_ACTIVE().call();\r\n                setPresaleActive(presale);\r\n\r\n                let PRICE = await main.methods.PUBLIC_SALE_PRICE().call();\r\n                if (wlStatus && presale) {\r\n                    if (_balanceOf < 2) {\r\n                        PRICE = await main.methods.PRESALE_PRICE().call();\r\n                    }\r\n                    setMintAlert('You are whitelisted.');\r\n                }else if( presale ){\r\n                    setMintAlert('NOT in WL. Minting from public sale.');\r\n                }else if( sale_active ){\r\n                    setMintAlert('Minting from public sale.');\r\n                }\r\n                setWeiPrice(PRICE);\r\n                setDisplayPrice( parseFloat(PRICE / 1e18).toFixed(2) );\r\n            } catch (err) {\r\n                alert('ERROR: CHANGE YOUR NETWORK TO ETHEREUM.');\r\n                console.log(err.toString());\r\n            }\r\n\r\n        } else {\r\n            console.log(\"No authorized account found\");\r\n        }\r\n    }\r\n\r\n    const mintNftHandler = async () => {\r\n        console.log('PRESALE_ACTIVE', presaleActive);\r\n        console.log('SALE_ACTIVE', saleActive);\r\n        if (!presaleActive && !saleActive) {\r\n            setMintAlert('Mint is disabled.');\r\n            return;\r\n        }\r\n        let tx;\r\n        let totalPrice = (weiPrice * mintAmount).toString();\r\n        const args = {from: account, value: totalPrice};\r\n        // console.log(weiPrice.toString(), mintAmount, args);\r\n        const mingMsg = 'Mint completed. Thank you! If WL, feel free to mint up to 4 more at public prices!';\r\n        if (presaleActive) {\r\n            await main.methods.mintPresale(mintAmount)\r\n                .estimateGas(args, async function (err, res) {\r\n                    if (err) {\r\n                        alert(err.toString());\r\n                    } else {\r\n                        tx = await main.methods.mintPresale(mintAmount).send(args);\r\n                        await checkWalletIsConnected();\r\n                        loadLastMintedNft();\r\n                        setMintAlert(mingMsg, tx.transactionHash);\r\n                    }\r\n                });\r\n        } else {\r\n            console.log('mintPublic')\r\n            await main.methods.mintPublic(mintAmount)\r\n                .estimateGas(args, async function (err, res) {\r\n                    if (err) {\r\n                        alert(err.toString());\r\n                    } else {\r\n                        tx = await main.methods.mintPublic(mintAmount).send(args);\r\n                        await checkWalletIsConnected();\r\n                        loadLastMintedNft();\r\n                        setMintAlert(mingMsg, tx.transactionHash);\r\n                    }\r\n                });\r\n        }\r\n\r\n    }\r\n\r\n    const loadLastMintedNft = async () => {\r\n        let balanceOf = await main.methods.balanceOf(account).call();\r\n        console.log('balanceOf', balanceOf);\r\n        if (balanceOf == 0) return;\r\n        --balanceOf;\r\n        const tokenOfOwnerByIndex = await main.methods.tokenOfOwnerByIndex(account, balanceOf).call();\r\n        let tokenURI = await main.methods.tokenURI(tokenOfOwnerByIndex).call();\r\n        // tokenURI = 'http://localhost:3000/metadata/0?0';\r\n        console.log('tokenURI', tokenURI);\r\n        const res = await fetch(tokenURI, {crossDomain: true});\r\n        const r = await res.json();\r\n        setLastMint(r.image);\r\n        // console.log(r);\r\n    }\r\n\r\n    const connectWalletHandler = async () => {\r\n        ethereum = await getweb3();\r\n\r\n        if (!ethereum) {\r\n            alert(\"Please install Metamask!\");\r\n        }\r\n\r\n        try {\r\n            const accounts = await ethereum.provider.request({method: 'eth_requestAccounts'});\r\n            console.log(\"Found an account! Address: \", accounts[0]);\r\n            setCurrentAccount(accounts[0]);\r\n        } catch (err) {\r\n            console.log(err)\r\n        }\r\n    }\r\n\r\n\r\n    const connectWalletButton = () => {\r\n        return (\r\n            <>\r\n                <button onClick={connectWalletHandler} className='cta-button connect-wallet-button'>\r\n                    Connect Wallet\r\n                </button>\r\n            </>\r\n        )\r\n    }\r\n\r\n    const setAmount = (e) => {\r\n        const amount = e.target.value;\r\n        _setAmount(amount);\r\n    }\r\n\r\n    function _setAmount(amount) {\r\n        setMintAmount(amount)\r\n        const price = parseFloat(weiPrice / 1e18).toFixed(2);\r\n        const total = parseFloat(price * amount).toFixed(2)\r\n        setDisplayPrice(total);\r\n    }\r\n\r\n    function setAmountLess() {\r\n        let amount = mintAmount;\r\n        if (amount > 1) amount--;\r\n        document.getElementById('inputAmount').value = amount;\r\n        _setAmount(amount)\r\n    }\r\n\r\n    function setAmountPlus() {\r\n        let amount = mintAmount;\r\n        amount++;\r\n        document.getElementById('inputAmount').value = amount;\r\n        _setAmount(amount)\r\n    }\r\n\r\n    const mintNftButton = () => {\r\n        return (\r\n            <>\r\n                <div className=\"mint-status rounded shadow small p-1\">\r\n                    {mintAlert}\r\n                </div>\r\n                <Row className=\" p-1\">\r\n                    <h3>BECOME A ZOGUER!</h3>\r\n                </Row>\r\n\r\n                <Row className=\"border-top p-1\">\r\n                    <Col className=\"text-lg-end\">AMOUNT</Col>\r\n                    <Col className=\"text-lg-start\">\r\n                        <Row>\r\n                            <input className='input-sig-button' defaultValue=\"-\" type=\"button\"\r\n                                   onClick={setAmountLess}/>\r\n                            <input id=\"inputAmount\" className='input-button' defaultValue={1} type=\"number\"\r\n                                   onChange={setAmount}/>\r\n                            <input className='input-sig-button' defaultValue=\"+\" type=\"button\"\r\n                                   onClick={setAmountPlus}/>\r\n                        </Row>\r\n                    </Col>\r\n                </Row>\r\n                <Row className=\"border-top p-1\">\r\n                    <Col className=\"text-lg-end\">TOTAL</Col>\r\n                    <Col className=\"text-lg-start\">{displayPrice} ETH</Col>\r\n                </Row>\r\n                <Row className=\"border-top p-1\">\r\n                    <Col className=\"text-lg-end\">ZOGUERS SCOUTED</Col>\r\n                    <Col className=\"text-lg-start\">{totalSupply} of {TOTAL_LIMIT}</Col>\r\n                </Row>\r\n                <Row className=\"border-top p-1\">\r\n                    <Col className=\"text-lg-end\">MY ZOGUERS</Col>\r\n                    <Col className=\"text-lg-start\">{balanceOf}</Col>\r\n                </Row>\r\n                <Row className=\"p-1\">\r\n                    {presaleActive || saleActive ?\r\n                    <button onClick={mintNftHandler}\r\n                            className='cta-button mint-nft-button rounded shadow p-1'>\r\n                        Mint Now\r\n                    </button> : ''}\r\n                </Row>\r\n                <Row>\r\n                    <Col className=\"small p-1\">{currentAccount}</Col>\r\n                </Row>\r\n            </>\r\n        )\r\n    }\r\n\r\n    async function getweb3() {\r\n        let web3Modal;\r\n        let provider;\r\n        let providerOptions;\r\n        providerOptions = {\r\n            metamask: {\r\n                id: \"injected\",\r\n                name: \"MetaMask\",\r\n                type: \"injected\",\r\n                check: \"isMetaMask\"\r\n            },\r\n            walletconnect: {\r\n                package: WalletConnectProvider,\r\n                options: {\r\n                    infuraId: \"647c7c604e3a4164a3400530f46e8e34\"\r\n                }\r\n            },\r\n            authereum: {\r\n                package: Authereum // required\r\n            },\r\n        };\r\n        web3Modal = new Web3Modal({\r\n            network: \"\",\r\n            cacheProvider: true,\r\n            providerOptions\r\n        });\r\n        provider = await web3Modal.connect();\r\n        provider.on('error', e => console.error('WS Error', e));\r\n        provider.on('end', e => console.error('WS End', e));\r\n\r\n        provider.on(\"accountsChanged\", (accounts) => {\r\n            checkWalletIsConnected();\r\n        });\r\n\r\n        provider.on(\"chainChanged\", (chainId) => {\r\n            checkWalletIsConnected();\r\n        });\r\n\r\n        provider.on(\"disconnect\", (error) => {\r\n            alert(\"disconnect\");\r\n            console.log(error);\r\n        });\r\n        provider.on(\"connect\", (info) => {\r\n            console.log(info);\r\n        });\r\n        web3 = new Web3(provider);\r\n\r\n        return provider;\r\n    }\r\n\r\n    useEffect(() => {\r\n        checkWalletIsConnected();\r\n    }, [])\r\n\r\n    return (\r\n        <div>\r\n            <Row className=\"m-1 text-center\">\r\n                <Col>\r\n                    <h1 className=\"mt-5\">ZOGUE</h1>\r\n                </Col>\r\n            </Row>\r\n            <div className=' d-flex justify-content-center'>\r\n                <Row className=\"\">\r\n                    <Col>\r\n                        <div className='main-app rounded shadow-lg'>\r\n                            <Row className=\"\">\r\n                                <Col>\r\n                                    {currentAccount ? mintNftButton() : connectWalletButton()}\r\n                                </Col>\r\n                                <Col className=\"d-none d-sm-block\">\r\n                                    <img src=\"ZOGUE_GIF.gif\" height={280}\r\n                                         className='rounded shadow-lg'/>\r\n                                </Col>\r\n                            </Row>\r\n                        </div>\r\n                    </Col>\r\n                </Row>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default App;\r\n","export default __webpack_public_path__ + \"static/media/logo.2fea0292.png\";","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}