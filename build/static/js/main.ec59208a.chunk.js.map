{"version":3,"sources":["App.js","logo.png","reportWebVitals.js","index.js"],"names":["ethereum","abi","contract","App","useState","currentAccount","setCurrentAccount","checkWalletIsConnected","a","getweb3","console","log","request","method","accounts","length","account","connectWalletHandler","alert","provider","mintNftHandler","ethers","providers","Web3Provider","signer","getSigner","nftContract","Contract","mintNFTs","value","utils","parseEther","nftTxn","wait","hash","providerOptions","metamask","id","name","type","check","walletconnect","package","WalletConnectProvider","options","infuraId","network","qrcodeModalOptions","mobileLinks","authereum","Authereum","web3Modal","Web3Modal","cacheProvider","connect","on","e","error","info","Web3","useEffect","className","src","logo","height","defaultValue","onClick","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ec59208a.chunk.js","sourcesContent":["import {useEffect, useState} from 'react';\r\nimport './App.css';\r\nimport contract from './contracts/NFTCollectible.json';\r\nimport {ethers} from 'ethers';\r\nimport logo from './logo.png'\r\n\r\nimport Web3 from \"web3\";\r\nimport Web3Modal from \"web3modal\";\r\nimport Authereum from \"authereum\";\r\nimport WalletConnectProvider from \"@walletconnect/web3-provider\";\r\n\r\nconst contractAddress = \"0x355638a4eCcb777794257f22f50c289d4189F245\";\r\nconst abi = contract.abi;\r\nlet web3, ethereum;\r\n\r\nfunction App() {\r\n\r\n    const [currentAccount, setCurrentAccount] = useState(null);\r\n\r\n    const checkWalletIsConnected = async () => {\r\n        ethereum = await getweb3();\r\n        if (!ethereum) {\r\n            console.log(\"Make sure you have Metamask installed!\");\r\n            return;\r\n        } else {\r\n            console.log(\"Wallet exists! We're ready to go!\")\r\n        }\r\n\r\n        const accounts = await ethereum.request({method: 'eth_accounts'});\r\n\r\n        if (accounts.length !== 0) {\r\n            const account = accounts[0];\r\n            console.log(\"Found an authorized account: \", account);\r\n            setCurrentAccount(account);\r\n        } else {\r\n            console.log(\"No authorized account found\");\r\n        }\r\n    }\r\n\r\n    const connectWalletHandler = async () => {\r\n        ethereum = await getweb3();\r\n\r\n        if (!ethereum) {\r\n            alert(\"Please install Metamask!\");\r\n        }\r\n\r\n        try {\r\n            const accounts = await ethereum.provider.request({method: 'eth_requestAccounts'});\r\n            console.log(\"Found an account! Address: \", accounts[0]);\r\n            setCurrentAccount(accounts[0]);\r\n        } catch (err) {\r\n            console.log(err)\r\n        }\r\n    }\r\n\r\n    const mintNftHandler = async () => {\r\n        try {\r\n\r\n            if (ethereum) {\r\n                const provider = new ethers.providers.Web3Provider(ethereum);\r\n                const signer = provider.getSigner();\r\n                const nftContract = new ethers.Contract(contractAddress, abi, signer);\r\n\r\n                console.log(\"Initialize payment\");\r\n                let nftTxn = await nftContract.mintNFTs(1, {value: ethers.utils.parseEther(\"0.01\")});\r\n\r\n                console.log(\"Mining... please wait\");\r\n                await nftTxn.wait();\r\n\r\n                console.log(`Mined, see transaction: https://rinkeby.etherscan.io/tx/${nftTxn.hash}`);\r\n\r\n            } else {\r\n                console.log(\"Ethereum object does not exist\");\r\n            }\r\n\r\n        } catch (err) {\r\n            console.log(err);\r\n        }\r\n    }\r\n\r\n    const connectWalletButton = () => {\r\n        return (\r\n            <>\r\n                <button onClick={connectWalletHandler} className='cta-button connect-wallet-button'>\r\n                    Connect Wallet\r\n                </button>\r\n            </>\r\n        )\r\n    }\r\n\r\n    const mintNftButton = () => {\r\n        return (\r\n            <>\r\n                <input className='input-button' defaultValue={1} type=\"number\"/>\r\n                <br/><br/>\r\n                <button onClick={mintNftHandler} className='cta-button mint-nft-button'>\r\n                    Mint NFT\r\n                </button>\r\n            </>\r\n        )\r\n    }\r\n\r\n    async function getweb3() {\r\n        let web3Modal;\r\n        let provider;\r\n        let providerOptions;\r\n        providerOptions = {\r\n            metamask: {\r\n                id: \"injected\",\r\n                name: \"MetaMask\",\r\n                type: \"injected\",\r\n                check: \"isMetaMask\"\r\n            },\r\n            walletconnect: {\r\n                package: WalletConnectProvider, // required\r\n                options: {\r\n                    infuraId: \"INFURA_ID\", // Required\r\n                    network: \"rinkeby\",\r\n                    qrcodeModalOptions: {\r\n                        mobileLinks: [\r\n                            \"rainbow\",\r\n                            \"metamask\",\r\n                            \"argent\",\r\n                            \"trust\",\r\n                            \"imtoken\",\r\n                            \"pillar\"\r\n                        ]\r\n                    }\r\n                }\r\n            },\r\n            authereum: {\r\n                package: Authereum // required\r\n            },\r\n        };\r\n        web3Modal = new Web3Modal({\r\n            network: \"rinkeby\",\r\n            cacheProvider: true,\r\n            providerOptions\r\n        });\r\n        provider = await web3Modal.connect();\r\n        provider.on('error', e => console.error('WS Error', e));\r\n        provider.on('end', e => console.error('WS End', e));\r\n\r\n        provider.on(\"disconnect\", (error) => {\r\n            console.log(error);\r\n        });\r\n        provider.on(\"connect\", (info) => {\r\n            console.log(info);\r\n        });\r\n        web3 = new Web3(provider);\r\n\r\n        return provider;\r\n    }\r\n\r\n    useEffect(() => {\r\n        checkWalletIsConnected();\r\n    }, [])\r\n\r\n    return (\r\n        <div className='main-app'>\r\n            <img src={logo} height={220}/>\r\n            <h1>Zogue</h1>\r\n            <div>\r\n                {currentAccount ? mintNftButton() : connectWalletButton()}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default App;\r\n","export default __webpack_public_path__ + \"static/media/logo.09d78c68.png\";","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}