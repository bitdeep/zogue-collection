{"version":3,"sources":["App.js","logo.png","reportWebVitals.js","index.js"],"names":["web3","ethereum","account","main","abi","contract","App","useState","currentAccount","setCurrentAccount","currentPrice","setCurrentPrice","totalSupply","setTotalSupply","mintAlert","setMintAlert","mintAmount","setMintAmount","presaleActive","setPresaleActive","saleActive","setSaleActive","presaleWhitelist","setPresaleWhitelist","lastMint","setLastMint","checkWalletIsConnected","a","getweb3","console","log","request","method","accounts","length","eth","Contract","methods","call","SALE_ACTIVE","PUBLIC_SALE_PRICE","price","PRESALE_ACTIVE","PRESALE_PRICE","alert","toString","mintNftHandler","args","from","value","tx","mintPublic","send","transactionHash","loadLastMintedNft","balanceOf","tokenOfOwnerByIndex","tokenURI","fetch","crossDomain","res","json","r","src","image","connectWalletHandler","provider","setAmount","e","target","providerOptions","metamask","id","name","type","check","walletconnect","package","WalletConnectProvider","options","infuraId","qrcodeModalOptions","mobileLinks","authereum","Authereum","web3Modal","Web3Modal","network","cacheProvider","connect","on","error","info","Web3","useEffect","className","logo","height","defaultValue","onChange","onClick","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.977fade9.chunk.js","sourcesContent":["import {useEffect, useState} from 'react';\r\nimport './App.css';\r\nimport contract from './contracts/NFTCollectible.json';\r\nimport logo from './logo.png'\r\n\r\nimport Web3 from \"web3\";\r\nimport Web3Modal from \"web3modal\";\r\nimport Authereum from \"authereum\";\r\nimport WalletConnectProvider from \"@walletconnect/web3-provider\";\r\n\r\nconst contractAddress = \"0x95B7FB1da941B6FD1952D85f2d762F11CB00E856\";\r\nconst abi = contract.abi;\r\nlet web3, ethereum, account, main;\r\n\r\nfunction App() {\r\n\r\n    const [currentAccount, setCurrentAccount] = useState(null);\r\n    const [currentPrice, setCurrentPrice] = useState(0);\r\n    const [totalSupply, setTotalSupply] = useState(0);\r\n    const [mintAlert, setMintAlert] = useState('');\r\n    const [mintAmount, setMintAmount] = useState(1);\r\n    const [presaleActive, setPresaleActive] = useState(false);\r\n    const [saleActive, setSaleActive] = useState(false);\r\n    const [presaleWhitelist, setPresaleWhitelist] = useState(false);\r\n    const [lastMint, setLastMint] = useState('');\r\n\r\n    const checkWalletIsConnected = async () => {\r\n        ethereum = await getweb3();\r\n        if (!ethereum) {\r\n            console.log(\"Make sure you have Metamask installed!\");\r\n            return;\r\n        } else {\r\n            console.log(\"Wallet exists! We're ready to go!\")\r\n        }\r\n\r\n        const accounts = await ethereum.request({method: 'eth_accounts'});\r\n\r\n        if (accounts.length !== 0) {\r\n            account = accounts[0];\r\n            console.log(\"Found an authorized account: \", account);\r\n            setCurrentAccount(account);\r\n\r\n            try {\r\n                main = new web3.eth.Contract(abi, contractAddress);\r\n                setPresaleWhitelist( await main.methods.presaleWhitelist(account).call() );\r\n\r\n                setTotalSupply( await main.methods.totalSupply().call() ) ;\r\n\r\n                setSaleActive( await main.methods.SALE_ACTIVE().call() ) ;\r\n                let price = await main.methods.PUBLIC_SALE_PRICE().call();\r\n                setCurrentPrice(price/1e18);\r\n                setMintAlert('You are NOT whitelisted. Minting from public sale.');\r\n                setPresaleActive(await main.methods.PRESALE_ACTIVE().call());\r\n\r\n                if( presaleWhitelist && presaleActive ){\r\n                    price = await main.methods.PRESALE_PRICE().call();\r\n                    setCurrentPrice(price/1e18);\r\n                    setMintAlert('You are whitelisted.');\r\n                }\r\n                console.log('PRESALE_ACTIVE', presaleActive );\r\n                console.log('SALE_ACTIVE', saleActive );\r\n                // loadLastMintedNft();\r\n\r\n            } catch (err) {\r\n                alert('ERROR: CHANGE YOUR NETWORK TO BSC TESTNET.');\r\n                console.log(err.toString());\r\n            }\r\n\r\n        } else {\r\n            console.log(\"No authorized account found\");\r\n        }\r\n    }\r\n\r\n    const mintNftHandler = async () => {\r\n        let price = currentPrice;\r\n        console.log('PRESALE_ACTIVE', presaleActive );\r\n        console.log('SALE_ACTIVE', saleActive );\r\n        if( ! presaleActive && ! saleActive ){\r\n            setMintAlert('Mint is disabled.');\r\n            return;\r\n        }\r\n        let tx;\r\n        const args = {from: account, value: price};\r\n        console.log('mintAmount', mintAmount);\r\n        return;\r\n        if( presaleWhitelist ){\r\n            tx = await main.methods.mintPresale(mintAmount).send(args);\r\n        }else{\r\n            tx = await main.methods.mintPublic(mintAmount).send(args);\r\n        }\r\n        setMintAlert('Mint completed. Thank you, tx ', tx.transactionHash);\r\n        loadLastMintedNft();\r\n    }\r\n\r\n    const loadLastMintedNft = async () => {\r\n        let balanceOf = await main.methods.balanceOf(account).call();\r\n        console.log('balanceOf', balanceOf);\r\n        if( balanceOf == 0 ) return;\r\n        --balanceOf;\r\n        const tokenOfOwnerByIndex = await main.methods.tokenOfOwnerByIndex(account, balanceOf).call();\r\n        let tokenURI = await main.methods.tokenURI(tokenOfOwnerByIndex).call();\r\n            tokenURI = 'http://localhost:3000/metadata/0?0';\r\n        console.log('tokenURI', tokenURI);\r\n        const res = await fetch(tokenURI, {crossDomain:true});\r\n        const r = await res.json();\r\n        setLastMint( (<img src={r.image}/> ) );\r\n        // console.log(r);\r\n    }\r\n\r\n    const connectWalletHandler = async () => {\r\n        ethereum = await getweb3();\r\n\r\n        if (!ethereum) {\r\n            alert(\"Please install Metamask!\");\r\n        }\r\n\r\n        try {\r\n            const accounts = await ethereum.provider.request({method: 'eth_requestAccounts'});\r\n            console.log(\"Found an account! Address: \", accounts[0]);\r\n            setCurrentAccount(accounts[0]);\r\n        } catch (err) {\r\n            console.log(err)\r\n        }\r\n    }\r\n\r\n\r\n    const connectWalletButton = () => {\r\n        return (\r\n            <>\r\n                <button onClick={connectWalletHandler} className='cta-button connect-wallet-button'>\r\n                    Connect Wallet\r\n                </button>\r\n            </>\r\n        )\r\n    }\r\n\r\n    const setAmount = (e) => {\r\n        setMintAmount(e.target.value)\r\n    }\r\n\r\n    const mintNftButton = () => {\r\n        return (\r\n            <>\r\n                <input id=\"inputAmount\" className='input-button' defaultValue={1} type=\"number\"\r\n                onChange={setAmount}/>\r\n                <br/><br/>\r\n                <button onClick={mintNftHandler} className='cta-button mint-nft-button'>\r\n                    Mint NFT\r\n                </button>\r\n                <div className=\"small\">\r\n                    <span>Mint price: {currentPrice} ETH</span>\r\n                </div>\r\n                <div className=\"small\">\r\n                    <span>Total minted: {totalSupply}</span>\r\n                </div>\r\n                <div className=\"small\">\r\n                    {mintAlert}\r\n                </div>\r\n                <div className=\"small\">\r\n                    {lastMint}\r\n                </div>\r\n            </>\r\n        )\r\n    }\r\n\r\n    async function getweb3() {\r\n        let web3Modal;\r\n        let provider;\r\n        let providerOptions;\r\n        providerOptions = {\r\n            metamask: {\r\n                id: \"injected\",\r\n                name: \"MetaMask\",\r\n                type: \"injected\",\r\n                check: \"isMetaMask\"\r\n            },\r\n            walletconnect: {\r\n                package: WalletConnectProvider, // required\r\n                options: {\r\n                    infuraId: \"INFURA_ID\", // Required\r\n                    qrcodeModalOptions: {\r\n                        mobileLinks: [\r\n                            \"rainbow\",\r\n                            \"metamask\",\r\n                            \"argent\",\r\n                            \"trust\",\r\n                            \"imtoken\",\r\n                            \"pillar\"\r\n                        ]\r\n                    }\r\n                }\r\n            },\r\n            authereum: {\r\n                package: Authereum // required\r\n            },\r\n        };\r\n        web3Modal = new Web3Modal({\r\n            network: \"\",\r\n            cacheProvider: true,\r\n            providerOptions\r\n        });\r\n        provider = await web3Modal.connect();\r\n        provider.on('error', e => console.error('WS Error', e));\r\n        provider.on('end', e => console.error('WS End', e));\r\n\r\n        provider.on(\"disconnect\", (error) => {\r\n            console.log(error);\r\n        });\r\n        provider.on(\"connect\", (info) => {\r\n            console.log(info);\r\n        });\r\n        web3 = new Web3(provider);\r\n\r\n        return provider;\r\n    }\r\n\r\n    useEffect(() => {\r\n        checkWalletIsConnected();\r\n    }, [])\r\n\r\n    return (\r\n        <div className='main-app'>\r\n            <img src={logo} height={220}/>\r\n            <h1>Zogue</h1>\r\n            <div>\r\n                {currentAccount ? mintNftButton() : connectWalletButton()}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default App;\r\n","export default __webpack_public_path__ + \"static/media/logo.09d78c68.png\";","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}